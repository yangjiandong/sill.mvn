<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.app.jruby</groupId>
    <artifactId>sill</artifactId>
    <version>1.0</version>
  </parent>
  <artifactId>sillapp</artifactId>
  <packaging>war</packaging>
  <name>Sill :: APP</name>

  <dependencies>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jruby</groupId>
      <artifactId>jruby-complete</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.4</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jruby.rack</groupId>
      <artifactId>jruby-rack</artifactId>
      <version>1.0.3</version>
    </dependency>
    <dependency>
      <!-- GZIP filter -->
      <groupId>org.mortbay.jetty</groupId>
      <artifactId>jetty-util</artifactId>
    </dependency>

    <!-- unit tests -->
  </dependencies>

  <build>

    <plugins>
      <!-- war插件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <archive>
            <manifestEntries>
              <version>${project.version}</version>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>

      <!-- compiler插件, 设定JDK版本 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
          <showDeprecation>false</showDeprecation>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
      </plugin>
      <!-- 拷贝webapp 到target/xx/ -->
      <!--
        <plugin>

            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
                <execution>
                    <phase>process-resources</phase>
                    <goals>
                        <goal>copy-resources</goal>
                    </goals>
                    <configuration>
                        <outputDirectory>${project.build.directory}/${project.build.finalName}/</outputDirectory>
                        <resources>
                            <resource>
                                <directory>${basedir}/src/main/webapp</directory>
                                <filtering>false</filtering>
                            </resource>
                        </resources>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        -->
      <!-- 压缩所需js，合成为 sonar.js -->
      <!--
        <plugin>

          <groupId>net.sf.alchim</groupId>
          <artifactId>yuicompressor-maven-plugin</artifactId>
          <version>0.7.1</version>
          <executions>
            <execution>
              <goals>
                <goal>compress</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <nosuffix>false</nosuffix>
            <failOnWarning>false</failOnWarning>
            <jswarn>false</jswarn>
            <sourceDirectory>src/main/webapp/javascripts</sourceDirectory>
            <outputDirectory>${project.build.directory}/${project.build.finalName}/javascripts</outputDirectory>
            <aggregations>
              <aggregation>
                <includes>
                  <include>**/yahoo-dom-event-min.js</include>
                  <include>**/calendar-min.js</include>
                  <include>**/application-min.js</include>
                  <include>**/prototype-min.js</include>
                  <include>**/scriptaculous-min.js</include>
                  <include>**/tablekit-min.js</include>
                  <include>**/prototip-min.js</include>
                  <include>**/tooltip-min.js</include>
                </includes>
                <output>${project.build.directory}/${project.build.finalName}/javascripts/sonar.js</output>
              </aggregation>
              <aggregation>
                <includes>
                  <include>**/yui-2.6.0-min.css</include>
                  <include>**/calendar-min.css</include>
                  <include>**/style-min.css</include>
                  <include>**/sonar-colorizer-min.css</include>
                </includes>
                <output>${project.build.directory}/${project.build.finalName}/stylesheets/sonar.css</output>
              </aggregation>
            </aggregations>
            <excludes>
              <exclude>**/gems/**/*.js</exclude>
              <exclude>**/gems/**/*.css</exclude>
            </excludes>
          </configuration>
        </plugin>
        -->

      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>7.1.4.v20100610</version>
        <configuration>
          <webAppConfig>
            <contextPath>/dev</contextPath>
            <descriptor>${basedir}/src/dev/web.xml</descriptor>
          </webAppConfig>
          <connectors>
            <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
              <port>9001</port>
              <maxIdleTime>60000</maxIdleTime>
            </connector>
          </connectors>

          <stopPort>9966</stopPort>
          <stopKey>foo</stopKey>
          <scanIntervalSeconds>5</scanIntervalSeconds>
          <systemProperties>
            <systemProperty>
              <name>sonar.home</name>
              <value>${project.build.directory}/sonar-dev-home</value>
            </systemProperty>
          </systemProperties>
        </configuration>
      </plugin>

      <!-- test插件,加大内存 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>-Xmx128M</argLine>
          <useSystemClassLoader>false</useSystemClassLoader>
        </configuration>
      </plugin>

      <!-- eclipse插件 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <configuration>
          <wtpversion>2.0</wtpversion>
          <additionalProjectnatures>
            <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
          </additionalProjectnatures>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <id>dev</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-plugins</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <overWriteReleases>true</overWriteReleases>
                  <overWriteSnapshots>true</overWriteSnapshots>
                  <!--
                    <includeGroupIds>org.codehaus.sonar.plugins</includeGroupIds>
                            <outputDirectory>${project.build.directory}/sonar-dev-home/extensions/plugins/</outputDirectory>
                    -->
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <!-- core plugins -->
        <!--
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-core-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-design-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-googleanalytics-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-findbugs-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-checkstyle-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-pmd-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-squid-java-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-cobertura-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-clover-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-surefire-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
              <dependency>
                <groupId>org.codehaus.sonar.plugins</groupId>
                <artifactId>sonar-cpd-plugin</artifactId>
                <version>${project.version}</version>
                <scope>provided</scope>
              </dependency>
          -->
      </dependencies>
    </profile>

    <profile>
      <id>mysql</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/classes</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/dev/mysql</directory>
                      <filtering>false</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-jdbc-driver</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <overWriteReleases>true</overWriteReleases>
                  <includeGroupIds>mysql</includeGroupIds>
                  <includeArtifactIds>mysql-connector-java</includeArtifactIds>
                  <outputDirectory>${project.build.directory}/sonar-dev-home/extensions/jdbc-driver/mysql/
                  </outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>derby</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/classes</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/dev/derby</directory>
                      <filtering>false</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-jdbc-driver</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-dependencies</goal>
                </goals>
                <configuration>
                  <overWriteIfNewer>true</overWriteIfNewer>
                  <overWriteReleases>true</overWriteReleases>
                  <includeGroupIds>org.apache.derby</includeGroupIds>
                  <includeArtifactIds>derbyclient</includeArtifactIds>
                  <outputDirectory>${project.build.directory}/sonar-dev-home/extensions/jdbc-driver/derby/
                  </outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>org.apache.derby</groupId>
          <artifactId>derbyclient</artifactId>
        </dependency>
      </dependencies>
    </profile>

    <profile>
      <id>rdoc</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jruby.plugins</groupId>
            <artifactId>jruby-rake-plugin</artifactId>
            <version>1.4.0</version>
            <executions>
              <execution>
                <id>install-gems</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>install-gems</goal>
                </goals>
                <configuration>
                  <jrubyHome>${env.JRUBY_HOME}</jrubyHome>
                  <gems>--no-rdoc --no-ri --user-install -v=2.2.2 rails</gems>
                </configuration>
              </execution>
              <execution>
                <id>rdoc</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>rake</goal>
                </goals>
                <configuration>
                  <jrubyHome>${env.JRUBY_HOME}</jrubyHome>
                  <launchDirectory>${basedir}/src/main/webapp/WEB-INF</launchDirectory>
                  <args>rdoc</args>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>